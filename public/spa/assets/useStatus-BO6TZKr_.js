import{Y as d,n as p}from"./index-D06vnydI.js";import{u as g}from"./useApi-DyMPQWJu.js";const I=d("status",()=>{const{apiCallWithLoading:i}=g(),s=p({playlistmode:!1,nics:[],darkmode:!1,current:{id:"",name:"",type:""},playlist:[],device:{audiocurrentdevice:"",audiodevicelist:[]},fullscreen:!1,logo:{show:!1,file:"",width:0,height:0,x:0,y:0},player:{event:"",buffering:0,media_path:"",filename:"",volume:100,speed:1,duration:0,time:0,position:0,fullscreen:!1,playing:!1,is_image:!1,image_path:null},background:"",image_time:0}),r=async(e,t)=>{const a=await i("/status/update","POST",{key:e,value:t},`Updating status for key "${e}"...`);if(a.data.pStatus)for(const[o,n]of Object.entries(a.data.pStatus))s.value[o]!==void 0?s.value[o]=n:console.warn(`Unknown key "${o}" in pStatus`);return a};return{pStatus:s,updateStatus:r,setAudioDevice:async e=>{const t=await i("/player/setaudiodevice","PUT",{deviceId:e},"Setting audio device...");return s.value.device.audiodevice=e,t},apiCallWithLoading:i,updateBackgroundColor:async e=>{if(e.startsWith("rgb")){const t=e.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);if(t){const a=parseInt(t[1]).toString(16).padStart(2,"0"),o=parseInt(t[2]).toString(16).padStart(2,"0"),n=parseInt(t[3]).toString(16).padStart(2,"0");e=`#${a}${o}${n}`}}await r("background",e)},isBright:e=>{let t=e.trim().toLowerCase();if(t==="white"||t==="#fff"||t==="#ffffff"||t==="rgb(255,255,255)")return!0;if(t.startsWith("#")){let a=t.replace("#","");if(a.length===3&&(a=a.split("").map(l=>l+l).join("")),a.length!==6)return!1;const o=parseInt(a.substring(0,2),16),n=parseInt(a.substring(2,4),16),u=parseInt(a.substring(4,6),16);return(o*299+n*587+u*114)/1e3>186}if(t.startsWith("rgb")){const a=t.match(/rgb\((\d+),(\d+),(\d+)\)/);if(a){const o=parseInt(a[1]),n=parseInt(a[2]),u=parseInt(a[3]);return(o*299+n*587+u*114)/1e3>186}}return!1},updateImageTime:async e=>{const t=await i("/status/update","POST",{key:"image_time",value:e},`Updating image time to ${e}...`);t.data.pStatus&&(s.value.image_time=t.data.pStatus.image_time)},updateLogo:async e=>{const t=await i(`/status/logo/sel/${encodeURIComponent(e)}`,"GET",null,`Updating logo to ${e}...`);t.data.pStatus&&(s.value.logo=t.data.pStatus.logo),await r("logo",s.value.logo)},updateLogoSize:async(e,t)=>{const a=await i("/status/logo/size","PUT",{width:e,height:t},"Updating logo size...");if(!a.data.pStatus||!a.data.pStatus.logo){console.error("Failed to update logo size:",a.data);return}s.value.logo=a.data.pStatus.logo,await r("logo",s.value.logo)},updateLogoVisibility:async e=>{const t=await i(`/status/logo/show/${e?"true":"false"}`,"GET",null,`Updating logo visibility to ${e?"visible":"hidden"}...`);s.value.logo=t.data.pStatus.logo,console.log(`Logo visibility updated to ${e?"visible":"hidden"}`)}}});export{I as u};
